services:
  # Traefik reverse proxy
  traefik:
    image: traefik:v3.4
    ports:
      - "80:80"
      - "8081:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml:ro
    networks:
      - traefik-network
      - frontend-network
      - backend-network
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        reservations:
          memory: 128M
          cpus: "0.1"
        limits:
          memory: 256M
          cpus: "0.25"
      update_config:
        parallelism: 1
        delay: 10s
        monitor: 30s
        failure_action: rollback
        max_failure_ratio: 0.3

  # Overrides
  db:
    environment:
      POSTGRES_USER: freehunt
      POSTGRES_PASSWORD_FILE: /run/secrets/backend_postgres_password
      POSTGRES_DB: freehunt
    secrets:
      - backend_postgres_password
    networks:
      - database-network
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        reservations:
          memory: 1G
          cpus: "0.5"
        limits:
          memory: 2G
          cpus: "1.0"
      update_config:
        parallelism: 1
        delay: 10s
        monitor: 30s
        failure_action: rollback
        max_failure_ratio: 0.3

  adminer:
    networks:
      - database-network
    deploy:
      # 'Disable' adminer
      replicas: 0

  authentik-postgresql:
    environment:
      POSTGRES_PASSWORD_FILE: /run/secrets/authentik_postgresql_password
      POSTGRES_USER: authentik
      POSTGRES_DB: authentik
    secrets:
      - authentik_postgresql_password
    networks:
      - auth-network
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          memory: 512M
          cpus: "0.5"
      update_config:
        parallelism: 1
        delay: 10s
        monitor: 30s
        failure_action: rollback
        max_failure_ratio: 0.3

  authentik-redis:
    networks:
      - auth-network
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          memory: 256M
          cpus: "0.25"
      update_config:
        parallelism: 1
        delay: 10s
        monitor: 30s
        failure_action: rollback
        max_failure_ratio: 0.3

  authentik-server:
    environment:
      AUTHENTIK_POSTGRESQL__PASSWORD: file:///run/secrets/authentik_postgresql_password
      AUTHENTIK_SECRET_KEY: file:///run/secrets/authentik_secret_key
    secrets:
      - authentik_postgresql_password
      - authentik_secret_key
    ports:
      - "9000:9000"
    networks:
      - auth-network
      - backend-network
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 512M
          cpus: "0.5"
      update_config:
        parallelism: 1
        delay: 10s
        monitor: 30s
        failure_action: rollback
        max_failure_ratio: 0.3

  authentik-worker:
    environment:
      AUTHENTIK_POSTGRESQL__PASSWORD: file:///run/secrets/authentik_postgresql_password
      AUTHENTIK_SECRET_KEY: file:///run/secrets/authentik_secret_key
    secrets:
      - authentik_postgresql_password
      - authentik_secret_key
    networks:
      - auth-network
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 512M
          cpus: "0.5"
      update_config:
        parallelism: 1
        delay: 10s
        monitor: 30s
        failure_action: rollback
        max_failure_ratio: 0.3

  matomo-db:
    environment:
      MYSQL_ROOT_PASSWORD_FILE: /run/secrets/matomo_mysql_root_password
      MYSQL_DATABASE: matomo
      MYSQL_USER: matomo
      MYSQL_PASSWORD_FILE: /run/secrets/matomo_database_password
    secrets:
      - matomo_mysql_root_password
      - matomo_database_password
    networks:
      - monitoring-network
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          memory: 512M
          cpus: "0.5"
      update_config:
        parallelism: 1
        delay: 10s
        monitor: 30s
        failure_action: rollback
        max_failure_ratio: 0.3

  matomo:
    environment:
      MATOMO_DATABASE_USERNAME: matomo
      MATOMO_DATABASE_PASSWORD_FILE: /run/secrets/matomo_database_password
      MATOMO_DATABASE_DBNAME: matomo
    secrets:
      - matomo_database_password
    ports:
      - "8090:80"
    networks:
      - monitoring-network
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 512M
          cpus: "0.5"
      update_config:
        parallelism: 1
        delay: 10s
        monitor: 30s
        failure_action: rollback
        max_failure_ratio: 0.3

  # Frontend
  frontend:
    image: ghcr.io/${GITHUB_REPOSITORY_OWNER:-freehunt}/freehunt-frontend:latest
    networks:
      - frontend-network
    deploy:
      replicas: 3
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.frontend.rule=Host(`freehunt.fr`) || Host(`www.freehunt.fr`)"
        - "traefik.http.routers.frontend.entrypoints=web"
        - "traefik.http.services.frontend.loadbalancer.server.port=5173"
      resources:
        reservations:
          memory: 256M
          cpus: "0.25"
        limits:
          memory: 512M
          cpus: "0.5"
      update_config:
        parallelism: 1
        delay: 10s
        monitor: 30s
        failure_action: rollback
        max_failure_ratio: 0.3

  # Backend
  backend:
    image: ghcr.io/${GITHUB_REPOSITORY_OWNER:-freehunt}/freehunt-backend:latest
    secrets:
      - database_url
      - s3_access_key
      - s3_secret_key
      - stripe_secret_key
      - stripe_webhook_secret
    networks:
      - backend-network
      - database-network
      - auth-network
    deploy:
      replicas: 3
      labels:
        - "traefik.enable=true"
        # API routing
        - "traefik.http.routers.backend-api.rule=Host(`api.freehunt.fr`)"
        - "traefik.http.routers.backend-api.entrypoints=web"
        - "traefik.http.routers.backend-api.service=backend-api"
        - "traefik.http.services.backend-api.loadbalancer.server.port=3000"
        # Socket.IO routing with sticky sessions
        - "traefik.http.routers.backend-socket.rule=Host(`socket.freehunt.fr`)"
        - "traefik.http.routers.backend-socket.entrypoints=web"
        - "traefik.http.routers.backend-socket.service=backend-socket"
        - "traefik.http.services.backend-socket.loadbalancer.server.port=3001"
        - "traefik.http.services.backend-socket.loadbalancer.sticky.cookie.name=freehunt-socket"
        - "traefik.http.services.backend-socket.loadbalancer.sticky.cookie.httpOnly=true"
      resources:
        reservations:
          memory: 512M
          cpus: "0.5"
        limits:
          memory: 1G
          cpus: "1.0"
      update_config:
        parallelism: 1
        delay: 10s
        monitor: 30s
        failure_action: rollback
        max_failure_ratio: 0.3

  # Production-only services
  uptime-kuma:
    container_name: uptime-kuma
    image: louislam/uptime-kuma:1.23.16-alpine
    ports:
      - "3002:3001"
    volumes:
      - uptime-kuma-data:/app/data
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped
    networks:
      - monitoring-network
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          memory: 256M
          cpus: "0.25"
      update_config:
        parallelism: 1
        delay: 10s
        monitor: 30s
        failure_action: rollback
        max_failure_ratio: 0.3

volumes:
  uptime-kuma-data:

networks:
  traefik-network:
    driver: overlay
    attachable: true
  frontend-network:
    driver: overlay
    internal: false
  backend-network:
    driver: overlay
    internal: false
  database-network:
    driver: overlay
    internal: true
  auth-network:
    driver: overlay
    internal: true
  monitoring-network:
    driver: overlay
    internal: true

secrets:
  # Backend secrets
  database_url:
    external: true
  backend_postgres_password:
    external: true

  # Authentik secrets
  authentik_postgresql_password:
    external: true
  authentik_secret_key:
    external: true

  # Matomo secrets
  matomo_database_password:
    external: true
  matomo_mysql_root_password:
    external: true

  # S3 secrets
  s3_access_key:
    external: true
  s3_secret_key:
    external: true

  # Stripe secrets
  stripe_secret_key:
    external: true
  stripe_webhook_secret:
    external: true
