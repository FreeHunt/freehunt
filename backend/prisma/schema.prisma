generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

generator custom_generator {
  provider = "prisma-generator-fake-data"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  FREELANCE
  COMPANY
}

model User {
  id                    String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                 String         @unique
  username              String
  role                  Role
  freelance             Freelance?
  company               Company?
  sentMessages          Message[]      @relation("sender")
  receivedMessages      Message[]      @relation("receiver")
  conversations         Conversation[] @relation("sender")
  conversationsReceived Conversation[] @relation("receiver")
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @default(now()) @updatedAt
  avatar                Document?
}

enum SkillType {
  TECHNICAL
  SOFT
}

model Skill {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String       @unique
  normalizedName String       @unique // Lowercase, no spaces, no special characters
  aliases        String[] // Acronyms, synonyms, variations... (e.g. "JS", "JavaScript")
  type           SkillType
  freelance      Freelance[]
  jobPosting     JobPosting[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt
}

model Freelance {
  id               String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user             User        @relation(fields: [userId], references: [id])
  userId           String      @unique @db.Uuid
  firstName        String
  lastName         String
  ///FAKE:faker.person.jobTitle()
  jobTitle         String
  ///FAKE:faker.number.float({ min: 50, max: 1000, multipleOf: 50 })
  averageDailyRate Float // TJM
  ///FAKE:faker.number.int({ min: 0, max: 10 })
  seniority        Int
  ///FAKE:faker.location.city()
  location         String
  skills           Skill[]
  documents        Document[]
  projects         Project[]
  candidates       Candidate[]
  stripeAccountId  String?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @default(now()) @updatedAt
}

model Company {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user        User         @relation(fields: [userId], references: [id])
  userId      String       @unique @db.Uuid
  ///FAKE:faker.company.name()
  name        String
  description String
  ///FAKE:faker.location.streetAddress({ useFullAddress: true })
  address     String
  ///FAKE:faker.string.numeric(9)
  siren       String
  jobPostings JobPosting[]
  projects    Project[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt
}

enum JobPostingLocation {
  HYBRID
  ONSITE
  REMOTE
}

enum JobPostingStatus {
  PENDING_PAYMENT
  PAID
  PUBLISHED
  DRAFT
  EXPIRED
  REJECTED
}

model JobPosting {
  id               String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  company          Company            @relation(fields: [companyId], references: [id])
  companyId        String             @db.Uuid
  title            String
  description      String
  location         JobPostingLocation
  isPromoted       Boolean
  ///FAKE:faker.number.float({ min: 50, max: 1000, multipleOf: 50 })
  averageDailyRate Float // TJM
  ///FAKE:faker.number.int({ min: 0, max: 10 })
  seniority        Int
  totalAmount      Float? // Montant total de la mission (TJM × nombre de jours)
  status           JobPostingStatus   @default(PENDING_PAYMENT) // Nouveau champ pour gérer le statut
  skills           Skill[]
  checkpoints      Checkpoint[]
  project          Project?
  candidates       Candidate[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now()) @updatedAt
}

model Project {
  id             String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String
  description    String
  amount         Float         @default(1)
  startDate      DateTime
  endDate        DateTime?
  jobPosting     JobPosting    @relation(fields: [jobPostingId], references: [id])
  jobPostingId   String        @unique @db.Uuid
  freelance      Freelance?    @relation(fields: [freelanceId], references: [id])
  freelanceId    String?       @db.Uuid
  company        Company?      @relation(fields: [companyId], references: [id])
  companyId      String?       @db.Uuid
  invoice        Invoice?
  conversation   Conversation? @relation(fields: [conversationId], references: [id])
  conversationId String?       @unique @db.Uuid
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now()) @updatedAt
}

model Checkpoint {
  id           String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String
  description  String
  amount       Float            @default(1)
  date         DateTime
  status       CheckpointStatus @default(TODO)
  jobPosting   JobPosting       @relation(fields: [jobPostingId], references: [id])
  jobPostingId String           @db.Uuid
  quote        Quote?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @default(now()) @updatedAt
}

enum CheckpointStatus {
  TODO
  IN_PROGRESS
  DONE
}

// Devis
model Quote {
  id              String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  checkpoint      Checkpoint @relation(fields: [checkpointId], references: [id])
  checkpointId    String     @unique @db.Uuid
  amount          Float?
  stripeSessionId String     @unique @db.Uuid
  devisLink       String?
  document        Document?
  invoice         Invoice?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @default(now()) @updatedAt
}

model Invoice {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  quote           Quote     @relation(fields: [quoteId], references: [id])
  quoteId         String    @unique @db.Uuid
  amount          Float?
  valueAddedTax   Float?
  stripeSessionId String    @unique @db.Uuid
  invoiceLink     String
  document        Document?
  documentId      String    @db.Uuid
  project         Project?  @relation(fields: [projectId], references: [id])
  projectId       String?   @unique @db.Uuid
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @default(now()) @updatedAt
}

enum DocumentType {
  INVOICE
  QUOTE
  AVATAR
}

model Document {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  url         String
  type        DocumentType
  freelance   Freelance?   @relation(fields: [freelanceId], references: [id])
  freelanceId String?      @db.Uuid
  invoice     Invoice?     @relation(fields: [invoiceId], references: [id])
  invoiceId   String?      @unique @db.Uuid
  quote       Quote?       @relation(fields: [quoteId], references: [id])
  quoteId     String?      @unique @db.Uuid
  message     Message?
  messageId   String?      @unique @db.Uuid
  userId      String?      @unique @db.Uuid
  user        User?        @relation(fields: [userId], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt
}

model Log {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  timestamp DateTime @default(now())
  tableName String
  action    String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Conversation {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  messages   Message[]
  project    Project?
  sender     User      @relation("sender", fields: [senderId], references: [id])
  senderId   String    @db.Uuid
  receiver   User      @relation("receiver", fields: [receiverId], references: [id])
  receiverId String    @db.Uuid
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt
}

model Message {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String       @db.Uuid
  sender         User         @relation("sender", fields: [senderId], references: [id])
  senderId       String       @db.Uuid
  receiver       User         @relation("receiver", fields: [receiverId], references: [id])
  receiverId     String       @db.Uuid
  documentId     String?      @unique @db.Uuid
  document       Document?    @relation(fields: [documentId], references: [id])
  timestamp      DateTime     @default(now())
  content        String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt
}

model Candidate {
  id           String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  jobPosting   JobPosting      @relation(fields: [jobPostingId], references: [id])
  jobPostingId String          @db.Uuid
  freelance    Freelance       @relation(fields: [freelanceId], references: [id])
  freelanceId  String          @db.Uuid
  status       CandidateStatus @default(PENDING)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @default(now()) @updatedAt
}

enum CandidateStatus {
  PENDING
  ACCEPTED
  REJECTED
}
