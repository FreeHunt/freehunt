generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  FREELANCE
  COMPANY
}

model User {
  id        String     @id @db.Uuid
  email     String     @unique
  password  String
  role      Role
  freelance Freelance?
  company   Company?
}

enum SkillType {
  TECHNICAL
  SOFT
}

model Skills {
  id         String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String       @unique
  type       SkillType
  freelance  Freelance[]
  jobPosting JobPosting[]
}

model Freelance {
  id               String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user             User       @relation(fields: [userId], references: [id])
  userId           String     @unique @db.Uuid
  firstName        String
  lastName         String
  averageDailyRate Float // TJM
  skills           Skills[]
  documents        Document[]
  projects         Project[]
}

model Company {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user        User         @relation(fields: [userId], references: [id])
  userId      String       @unique @db.Uuid
  name        String
  siren       String
  description String
  jobPostings JobPosting[]
}

model JobPosting {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  company     Company       @relation(fields: [companyId], references: [id])
  companyId   String        @db.Uuid
  title       String
  description String
  location    String
  isPromoted  Boolean
  skills      Skills[]
  checkpoints Checkpoints[]
  project     Project?
}

model Project {
  id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String
  description  String
  startDate    DateTime
  endDate      DateTime?
  jobPosting   JobPosting @relation(fields: [jobPostingId], references: [id])
  jobPostingId String     @unique @db.Uuid
  freelance    Freelance? @relation(fields: [freelanceId], references: [id])
  freelanceId  String?    @db.Uuid
  invoice      Invoice?
}

model Checkpoints {
  id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String
  description  String
  date         DateTime
  jobPosting   JobPosting @relation(fields: [jobPostingId], references: [id])
  jobPostingId String     @db.Uuid
  quote        Quote?
}

// Devis
model Quote {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  checkpoint   Checkpoints @relation(fields: [checkpointId], references: [id])
  checkpointId String      @unique @db.Uuid
  amount       Float?
  document     Document?
  invoice      Invoice?
}

model Invoice {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  quote         Quote     @relation(fields: [quoteId], references: [id])
  quoteId       String    @unique @db.Uuid
  amount        Float?
  valueAddedTax Float?
  document      Document?
  documentId    String    @db.Uuid
  project       Project?  @relation(fields: [projectId], references: [id])
  projectId     String?   @unique @db.Uuid
}

enum DocumentType {
  INVOICE
  QUOTE
}

model Document {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  url         String
  type        DocumentType
  freelance   Freelance?   @relation(fields: [freelanceId], references: [id])
  freelanceId String       @db.Uuid
  invoice     Invoice?     @relation(fields: [invoiceId], references: [id])
  invoiceId   String       @unique @db.Uuid
  quote       Quote?       @relation(fields: [quoteId], references: [id])
  quoteId     String       @unique @db.Uuid
}

model Logs {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  timestamp DateTime @default(now())
  tableName String
  action    String
}
